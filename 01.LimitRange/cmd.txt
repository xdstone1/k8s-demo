#
# lab goal:
# learn how to set object kind: LimitRange to set defalt value 
# or max/min limitation
#

# first, lets create a new namespace
kubectl create namespace default-mem-example

# then we create a LimitRange to define the mem limitation
kubectl create -f memory-limits.yaml -n default-mem-example

# create a pod without any resource usage claiming
kubectl create -f pod.yaml -n default-mem-example
kubectl get pod default-mem-demo -n default-mem-example -o yaml

# create pod-2 with self-defined limit on memory
kubectl create -f pod-2.yaml -n default-mem-example
kubectl get pod default-mem-demo-2 -n default-mem-example -o yaml

# create pod-3 with self-defined requests but no limit defined
kubectl create -f pod-3.yaml -n default-mem-example
kubectl get pod default-mem-demo-3 -n default-mem-example -o yaml

#then we can try max/min setup
kubectl create namespace constraints-mem-example

# create object and define the limitation range 
kubectl create -f mem-cons.yaml -n constraints-mem-example
kubectl get limitrange -n mem-min-max-demo-lr -n constraints-mem-example -o yaml

#then we create a pod out of up limit range
# it will fail because on namespace level, memory uplimit is set to 1G
kubectl create -f cons-mem-pod-2.yaml -n constraints-mem-example

#then we create a pod out of down limit range
# it will fail also because requested minimum mem is less than overall defined minimum value
kubectl create -f cons-mem-pod-3.yaml -n constraints-mem-example


#
# clean up
#

kubectl delete ns constraints-mem-example
kubectl delete ns default-mem-example

